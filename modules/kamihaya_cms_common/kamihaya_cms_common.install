<?php

use Drupal\Core\Config\FileStorage;
use Drupal\Core\Config\InstallStorage;
use Drupal\Core\Site\Settings;

/**
 * Implements hook_install().
 */
function kamihaya_cms_common_install() {
  /** @var \Drupal\Core\Entity\EntityStorageInterface $entity_storage */
  $entity_storage = \Drupal::entityTypeManager()->getStorage('responsive_preview_device');

  // ---------- 1. Delete obsolete devices ----------------------------------.
  $old_device_ids = [
    'iphone_xs',
    'iphone_xs_max',
    'galaxy_s9',
    'ipad_pro',
    'galaxy_tab_s4',
    'galaxy_s7',
    'galaxy_tab_2_10',
    'ipad_air_2',
    'iphone_7',
    'iphone_7plus',
  ];

  // Load only the devices that actually exist.
  $devices_to_delete = $entity_storage->loadMultiple($old_device_ids);

  if (!empty($devices_to_delete)) {
    $entity_storage->delete($devices_to_delete);
    \Drupal::logger('kamihaya_cms_common')->notice(
      'Deleted obsolete responsive-preview devices: @ids',
      ['@ids' => implode(', ', array_keys($devices_to_delete))]
    );
  }
  else {
    \Drupal::logger('kamihaya_cms_common')
      ->debug('No obsolete responsive-preview devices found — deletion skipped.');
  }

  // ---------- 1.1 Delete obsolete device YAML files if the module exists ----------
  // Load the module handler service.
  $moduleHandler = \Drupal::service('module_handler');
  // Define the modules and their install paths to check for obsolete config files.
  $modules_to_check = [
    'responsive_preview',
    'kamihaya_cms_common',
  ];
  // Loop through each module to check and delete obsolete device config files.
  foreach ($modules_to_check as $module_name) {
    // Ensure the module is enabled before proceeding.
    if ($moduleHandler->moduleExists($module_name)) {
      // Get the module's path.
      $module_path = $moduleHandler->getModule($module_name)->getPath();
      // Build the full path to the module's config/install directory.
      $install_path = $module_path . '/' . InstallStorage::CONFIG_INSTALL_DIRECTORY;
      // Loop through each obsolete device ID and delete its corresponding config file.
      foreach ($old_device_ids as $device_id) {
        $config_file = $install_path . '/responsive_preview.device.' . $device_id . '.yml';
        if (file_exists($config_file)) {
          // Delete the YAML config file.
          unlink($config_file);
          // Log the action.
          \Drupal::logger('kamihaya_cms_common')->notice(
            'Deleted obsolete config file: @file from module: @module',
            ['@file' => $config_file, '@module' => $module_name]
          );
        }
      }
    }
  }

  // ---------- 2. Import new device configs --------------------------------.
  $module_handler = \Drupal::service('extension.list.module');
  $module_path    = $module_handler->getPath('kamihaya_cms_common');
  $config_path    = $module_path . '/' . InstallStorage::CONFIG_INSTALL_DIRECTORY;
  $file_storage   = new FileStorage($config_path);

  // Config names to import (the YAML file *name* inside the module’s
  // config/install directory, *without* the ".yml" extension).
  $config_ids = [
    'responsive_preview.device.galaxy_24_ultra',
    'responsive_preview.device.galaxy_24',
    'responsive_preview.device.google_pixel_9_pro_xl',
    'responsive_preview.device.google_pixel_9_pro',
    'responsive_preview.device.google_pixel_9',
    'responsive_preview.device.ipad_10',
    'responsive_preview.device.iphone_16_plus',
    'responsive_preview.device.iphone_16_pro_max',
    'responsive_preview.device.iphone_16_pro',
    'responsive_preview.device.iphone16',
  ];

  foreach ($config_ids as $config_id) {
    // Read raw YAML as an array.
    if (!$data = $file_storage->read($config_id)) {
      \Drupal::logger('kamihaya_cms_common')->error(
        'Config @cfg not found or unreadable – import skipped.',
        ['@cfg' => $config_id]
      );
      continue;
    }

    // `$data['id']` holds the actual entity ID, e.g. "galaxy_24_ultra".
    $device_id = $data['id'] ?? NULL;
    if (!$device_id) {
      \Drupal::logger('kamihaya_cms_common')->error(
        'Config @cfg missing "id" key – import skipped.',
        ['@cfg' => $config_id]
      );
      continue;
    }

    // Skip if the device already exists.
    if ($entity_storage->load($device_id)) {
      \Drupal::logger('kamihaya_cms_common')->debug(
        'Device already exists – not re-importing: @id',
        ['@id' => $device_id]
      );
      continue;
    }

    // Create and save the entity.
    try {
      $device = $entity_storage->create($data);
      $device->save();
      \Drupal::logger('kamihaya_cms_common')->notice(
        'Imported responsive-preview device: @id',
        ['@id' => $device_id]
      );
    }
    catch (\Exception $e) {
      \Drupal::logger('kamihaya_cms_common')->error(
        'Failed importing @id: @msg',
        ['@id' => $device_id, '@msg' => $e->getMessage()]
      );
    }
  }
}

/**
 * Update configs.
 */
function kamihaya_cms_common_update_10001() {
  _kamihaya_cms_common_change_configs('kamihaya_cms_common', [
    'core.date_format.kamihaya_date_time.yml',
    'core.date_format.kamihaya_date.yml',
    'core.date_format.kamihaya_year_month.yml',
  ], 'install');

}

/**
 * Update configs.
 */
function kamihaya_cms_common_update_10002() {
  _kamihaya_cms_common_change_configs('kamihaya_cms_common', [
    'editor.editor.full_html.yml',
    'filter.format.full_html.yml',
  ], 'optional');
}

/**
 * Update configs.
 */
function kamihaya_cms_common_update_10003() {
  $editor_config = \Drupal::configFactory()->getEditable('editor.editor.full_html');
  $file_config = _kamihaya_cms_common_load_config_file('kamihaya_cms_common', 'editor.editor.full_html.yml', 'optional');
  if (!empty($editor_config) && !empty($file_config)) {
    $items = !empty($file_config['settings']['toolbar']['items']) ? $file_config['settings']['toolbar']['items'] : [];
    $plugins = !empty($file_config['settings']['plugins']) ? $file_config['settings']['plugins'] : [];
    if (!empty($items)) {
      $editor_config->set('settings.toolbar.items', _kamihaya_cms_common_merge_config($editor_config->get('settings.toolbar.items') ?: [], $items));
    }
    if (!empty($plugins)) {
      $editor_config->set('settings.plugins', _kamihaya_cms_common_merge_config($editor_config->get('settings.plugins') ?: [], $plugins));
    }
    $editor_config->save(TRUE);
  }

  $filter_config = \Drupal::configFactory()->getEditable('filter.format.full_html');
  $file_config = _kamihaya_cms_common_load_config_file('kamihaya_cms_common', 'filter.format.full_html.yml', 'optional');
  if (!empty($filter_config) && !empty($file_config)) {
    $dep_config = !empty($file_config['dependencies']['config']) ? $file_config['dependencies']['config'] : [];
    $dep_module = !empty($file_config['dependencies']['module']) ? $file_config['dependencies']['module'] : [];
    $filters = !empty($file_config['filters']) ? $file_config['filters'] : [];
    if (!empty($dep_config)) {
      $filter_config->set('dependencies.config', _kamihaya_cms_common_merge_config($filter_config->get('dependencies.config') ?: [], $dep_config));
    }
    if (!empty($dep_module)) {
      $filter_config->set('dependencies.module', _kamihaya_cms_common_merge_config($filter_config->get('dependencies.module') ?: [], $dep_module));
    }
    if (!empty($filters)) {
      $filter_config->set('filters', _kamihaya_cms_common_merge_config($filter_config->get('filters') ?: [], $filters));
    }
    $filter_config->save(TRUE);
  }

  if (!\Drupal::moduleHandler()->moduleExists('imce')) {
    return;
  }
  $admin_profile = \Drupal::configFactory()->getEditable('imce.profile.admin');
  if (empty($admin_profile)) {
    return;
  }
  $imce_config = \Drupal::configFactory()->getEditable('imce.settings');
  $imce_config->set('roles_profiles.administrator.public', 'admin');

  if (!empty(Settings::get('file_private_path'))) {
    $imce_config->set('roles_profiles.administrator.private', 'admin');
  }
  $imce_config->save(TRUE);
}

/**
 * Update full HTML edotor config.
 */
function kamihaya_cms_common_update_10004() {
  /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
  $module_installer = \Drupal::service("module_installer");
  $modules = [];
  // Install CKEditor5 plugin pack modules.
  if (\Drupal::moduleHandler()->moduleExists('ckeditor5_plugin_pack')) {
    $modules[] = 'ckeditor5_plugin_pack';
  }
  if (\Drupal::moduleHandler()->moduleExists('ckeditor5_plugin_pack_font')) {
    $modules[] = 'ckeditor5_plugin_pack_font';
  }
  if (!empty($modules)) {
    $module_installer->install($modules);
  }

  // Update full HTML editor config.
  $editor_config = \Drupal::configFactory()->getEditable('editor.editor.full_html');
  $file_config = _kamihaya_cms_common_load_config_file('kamihaya_cms_common', 'editor.editor.full_html.yml', 'optional');
  if (!empty($editor_config) && !empty($file_config)) {
    $items = !empty($file_config['settings']['toolbar']['items']) ? $file_config['settings']['toolbar']['items'] : [];
    $plugins = !empty($file_config['settings']['plugins']) ? $file_config['settings']['plugins'] : [];
    if (!empty($items)) {
      $editor_config->set('settings.toolbar.items', _kamihaya_cms_common_merge_config($editor_config->get('settings.toolbar.items') ?: [], $items));
    }
    if (!empty($plugins)) {
      $editor_config->set('settings.plugins', _kamihaya_cms_common_merge_config($editor_config->get('settings.plugins') ?: [], $plugins));
    }
    $editor_config->save(TRUE);
  }

  // Uninstall CKEditor font plugin.
  if (\Drupal::moduleHandler()->moduleExists('ckeditor_font')) {
    $module_installer->uninstall(['ckeditor_font']);
  }
}

/**
 * Merge config array.
 *
 * @param array $base_config
 *   The base config.
 * @param array $new_config
 *   T¥he new config.
 *
 * @return array
 *   The merged config.
 */
function _kamihaya_cms_common_merge_config(array $base_config, array $new_config) {
  foreach ($new_config as $key => $value) {
    if ((is_string($key) && empty($base_config[$key]))
      || (is_int($key) && !in_array($value, $base_config))) {
      $base_config[$key] = $value;
    }
  }
  return $base_config;
}

/**
 * Enable remove_http_headers module.
 */
function kamihaya_cms_common_update_10005() {
  $installed = \Drupal::service('module_installer')->install(['remove_http_headers'], TRUE);
  if ($installed) {
    $config_factory = \Drupal::configFactory();
    $config = $config_factory->getEditable('remove_http_headers.settings');
    $config->set('headers_to_remove', ['X-Generator']);
    $config->save(TRUE);
  }
}

