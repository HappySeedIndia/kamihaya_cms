<?php

use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\node\Entity\NodeType;
use Drupal\paragraphs\Entity\ParagraphsType;

/**
 * Update configs.
 */
function kamihaya_cms_paragraph_type_update_10001() {
  \Drupal::service('module_installer')->install(['entity_browser']);
  _kamihaya_cms_common_change_configs('kamihaya_cms_paragraph_type', [
    'paragraphs.paragraphs_type.headings.yml',
    'field.storage.paragraph.field_color.yml',
    'field.storage.paragraph.field_style.yml',
    'field.storage.paragraph.field_title_tag.yml',
    'field.storage.paragraph.field_title_text.yml',
    'field.field.paragraph.headings.field_color.yml',
    'field.field.paragraph.headings.field_style.yml',
    'field.field.paragraph.headings.field_title_tag.yml',
    'field.field.paragraph.headings.field_title_text.yml',
    'core.entity_form_display.paragraph.headings.default.yml',
    'core.entity_view_display.paragraph.headings.default.yml',
    'paragraphs.paragraphs_type.slider_item.yml',
    'paragraphs.paragraphs_type.slider.yml',
    'field.storage.paragraph.field_link.yml',
    'field.storage.paragraph.field_text.yml',
    'field.storage.paragraph.field_title.yml',
    'field.storage.paragraph.field_slider_image.yml',
    'field.storage.paragraph.field_slider_items.yml',
    'field.field.paragraph.slider_item.field_link.yml',
    'field.field.paragraph.slider_item.field_slider_image.yml',
    'field.field.paragraph.slider_item.field_text.yml',
    'field.field.paragraph.slider_item.field_title.yml',
    'field.field.paragraph.slider.field_slider_items.yml',
    'core.entity_form_display.paragraph.slider_item.default.yml',
    'core.entity_view_display.paragraph.slider_item.default.yml',
    'core.entity_form_display.paragraph.slider.default.yml',
    'core.entity_view_display.paragraph.slider.default.yml',
    'paragraphs.paragraphs_type.embed_tag.yml',
    'field.storage.paragraph.field_embed_tag.yml',
    'field.field.paragraph.embed_tag.field_embed_tag.yml',
    'core.entity_form_display.paragraph.embed_tag.default.yml',
    'core.entity_view_display.paragraph.embed_tag.default.yml',
    'paragraphs.paragraphs_type.file_download.yml',
    'field.storage.paragraph.field_file.yml',
    'field.field.paragraph.file_download.field_file.yml',
    'core.entity_form_display.paragraph.file_download.default.yml',
    'core.entity_view_display.paragraph.file_download.default.yml',
    'paragraphs.paragraphs_type.video.yml',
    'field.storage.paragraph.field_video_media.yml',
    'field.storage.paragraph.field_video_tag.yml',
    'field.field.paragraph.video.field_video_media.yml',
    'field.field.paragraph.video.field_video_tag.yml',
    'core.entity_form_display.paragraph.video.default.yml',
    'core.entity_view_display.paragraph.video.default.yml',
    'core.entity_form_display.paragraph.divider.default.yml',
    'core.entity_form_display.paragraph.link_button.default.yml',
  ], 'install');

  _kamihaya_cms_common_change_configs('kamihaya_cms_paragraph_type', [
    'views.view.contents_list.yml',
    'entity_browser.browser.contents_list.yml',
    'paragraphs.paragraphs_type.featured_content.yml',
    'field.storage.paragraph.field_content.yml',
    'field.field.paragraph.featured_content.field_content.yml',
    'core.entity_form_display.paragraph.featured_content.default.yml',
    'core.entity_view_display.paragraph.featured_content.default.yml',
    'paragraphs.paragraphs_type.two_col_table_row.yml',
    'field.storage.paragraph.field_row_data.yml',
    'field.storage.paragraph.field_row_label.yml',
    'field.field.paragraph.two_col_table_row.field_row_data.yml',
    'field.field.paragraph.two_col_table_row.field_row_label.yml',
    'core.entity_form_display.paragraph.two_col_table_row.default.yml',
    'core.entity_view_display.paragraph.two_col_table_row.default.yml',
    'paragraphs.paragraphs_type.two_col_table.yml',
    'field.storage.paragraph.field_table_rows.yml',
    'field.field.paragraph.two_col_table.field_table_rows.yml',
    'core.entity_form_display.paragraph.two_col_table.default.yml',
    'core.entity_view_display.paragraph.two_col_table.default.yml',
  ], 'optional');

  _kamihaya_cms_common_save_translation_configs([
    'paragraphs.paragraphs_type.headings.yml',
    'field.field.paragraph.headings.field_color.yml',
    'field.field.paragraph.headings.field_style.yml',
    'field.field.paragraph.headings.field_title_tag.yml',
    'field.field.paragraph.headings.field_title_text.yml',
    'paragraphs.paragraphs_type.slider_item.yml',
    'paragraphs.paragraphs_type.slider.yml',
    'field.field.paragraph.slider_item.field_link.yml',
    'field.field.paragraph.slider_item.field_slider_image.yml',
    'field.field.paragraph.slider_item.field_text.yml',
    'field.field.paragraph.slider_item.field_title.yml',
    'field.field.paragraph.slider.field_slider_items.yml',
    'paragraphs.paragraphs_type.embed_tag.yml',
    'field.field.paragraph.headings.feild_embed_tag.yml',
    'views.view.contents_list.yml',
    'entity_browser.browser.contents_list.yml',
    'paragraphs.paragraphs_type.featured_content.yml',
    'field.field.paragraph.featured_content.field_content.yml',
    'paragraphs.paragraphs_type.file_download.yml',
    'field.field.paragraph.file_download.field_file.yml',
    'paragraphs.paragraphs_type.two_col_table_row.yml',
    'field.field.paragraph.two_col_table_row.field_row_data.yml',
    'field.field.paragraph.two_col_table_row.field_row_label.yml',
    'paragraphs.paragraphs_type.two_col_table.yml',
    'field.field.paragraph.two_col_table.field_table_rows.yml',
    'paragraphs.paragraphs_type.video.yml',
    'field.field.paragraph.video.feild_video_media.yml',
    'field.field.paragraph.video.feild_video_tag.yml',
  ], 'ja');

}

/**
 * Update configs.
 */
function kamihaya_cms_paragraph_type_update_10002() {
  \Drupal::service('module_installer')->install(['entity_browser']);
  _kamihaya_cms_common_change_configs('kamihaya_cms_paragraph_type', [
    'field.storage.paragraph.field_color.yml',
    'field.storage.paragraph.field_mobile_image.yml',
    'field.field.paragraph.headings.field_color.yml',
    'field.field.paragraph.slider_item.field_mobile_image.yml',
    'field.field.paragraph.slider_item.field_slider_image.yml',
    'core.entity_form_display.paragraph.headings.default.yml',
    'core.entity_view_display.paragraph.headings.default.yml',
    'core.entity_form_display.paragraph.divider.default.yml',
    'core.entity_form_display.paragraph.image_link.default.yml',
    'core.entity_form_display.paragraph.link_button.default.yml',
    'field.field.paragraph.slider_item.field_image_link.yml',
    'core.entity_view_display.paragraph.slider_item.default.yml',
    'core.entity_form_display.paragraph.slider_item.default.yml',
  ], 'install');

  _kamihaya_cms_common_save_translation_configs([
    'field.field.paragraph.slider_item.field_image_link.yml',
    'field.field.paragraph.slider_item.field_mobile_image.yml',
  ], 'ja');

}

/**
 * Update configs.
 */
function kamihaya_cms_paragraph_type_update_10003() {
  $fields = [
    'field.field.paragraph.divider.field_divider_image',
    'field.field.paragraph.image_link.field_image',
    'field.field.paragraph.image.field_image',
    'field.field.paragraph.left_image_text.field_image',
    'field.field.paragraph.right_image_text.field_image',
    'field.field.paragraph.slider_item.field_mobile_image',
    'field.field.paragraph.slider_item.field_slider_image',
  ];

  foreach($fields as $field) {
    if ($field_config = \Drupal::configFactory()->getEditable($field)) {
      $value = explode(' ', $field_config->get('settings.file_extensions'));
      if (!in_array('svg', $value)) {
        $value[] = 'svg';
      }
      if (!in_array('webp', $value)) {
        $value[] = 'webp';
      }
      $field_config->set('settings.file_extensions', implode(' ', $value));
      $field_config->save(TRUE);
    }
  }
}

/**
 * Update configs.
 */
function kamihaya_cms_paragraph_type_update_10004() {
  $configs = [];
  $field_config = FieldStorageConfig::loadByName('paragraph', 'field_image_description');
  if (!$field_config) {
    $configs = array_merge($configs, [
      'field.storage.paragraph.field_image_description.yml',
      'field.field.paragraph.image_link.field_image_description.yml',
    ]);
  }
  $field_config = FieldStorageConfig::loadByName('paragraph', 'field_image_desc_text_size');
  if (!$field_config) {
    $configs = array_merge($configs, [
      'field.storage.paragraph.field_image_desc_text_size.yml',
      'field.field.paragraph.image_link.field_image_desc_text_size.yml',
    ]);
  }
  _kamihaya_cms_common_change_configs('kamihaya_cms_paragraph_type', $configs, 'install');

  if ($field_config) {
    return;
  }

  $fields = [
    'field_image_description' => [
      'form' => 'string_textarea',
      'view' => 'basic_string',
    ],
    'field_image_desc_text_size' => [
      'form' => 'number',
      'view' => 'number_integer',
    ],
  ];

  /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $display_repository */
  $display_repository = \Drupal::service('entity_display.repository');

  foreach($fields as $field => $type) {
    $display_repository->getFormDisplay('paragraph', 'image_link')
      ->setComponent($field, [
        'type' => $type['form'],
      ])
      ->save();

    $display_repository->getViewDisplay('paragraph', 'image_link')
      ->setComponent($field, [
        'label' => 'hidden',
        'type' => $type['view'],
      ])
      ->save();
  }

  _kamihaya_cms_common_save_translation_configs([
    'field.field.paragraph.image_link.field_image_description.yml',
    'field.field.paragraph.image_link.field_meta_tag.yml',
  ], 'ja');

}

/**
 * Update configs.
 */
function kamihaya_cms_paragraph_type_update_10005() {
  $storage_configs = [];
  $field_configs = [];
  $fields = [
    'image' => [
      'field_width' => 'number',
      'field_width_unit' => 'options_select',
      'field_height' => 'number',
      'field_height_unit' => 'options_select',
    ],
    'image_link' => [
      'field_width' => 'number',
      'field_width_unit' => 'options_select',
      'field_mobile_height' => 'number',
    ],
  ];

  foreach($fields as $type => $para_fields) {
    foreach($para_fields as $field => $field_type) {
      $field_config = FieldStorageConfig::loadByName('paragraph', $field);
      if ($field_config) {
        continue;
      }
      if (!in_array("field.storage.paragraph.{$field}.yml", $storage_configs)) {
        $storage_configs[] = "field.storage.paragraph.{$field}.yml";
      }
      $field_configs[] = "field.field.paragraph.{$type}.{$field}.yml";
    }
  }
  $comfigs = array_merge($storage_configs, $field_configs);
  _kamihaya_cms_common_change_configs('kamihaya_cms_paragraph_type', $comfigs, 'install');

  if (empty($comfigs)) {
    return;
  }

  /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $display_repository */
  $display_repository = \Drupal::service('entity_display.repository');

  foreach($fields as $type => $para_fields) {
    foreach($para_fields as $field => $field_type) {
      $display_repository->getFormDisplay('paragraph', $type)
        ->setComponent($field, [
          'type' => $field_type,
         ])
        ->save();

    $display = $field_type == 'number' ? 'number_integer' : 'list_default';
    $display_repository->getViewDisplay('paragraph', $type)
      ->setComponent($field, [
        'label' => 'hidden',
        'type' => $display,
      ])
      ->save();
    }
  }

  _kamihaya_cms_common_save_translation_configs([
    'field.field.paragraph.image.field_width.yml',
    'field.field.paragraph.image.field_width_unit.yml',
    'field.field.paragraph.image.field_height.yml',
    'field.field.paragraph.image.field_height_unit.yml',
    'field.field.paragraph.image_link.field_width.yml',
    'field.field.paragraph.image_link.field_width_unit.yml',
    'field.field.paragraph.image_link.field_mobile_height.yml',
  ], 'ja');

}

/**
 * Update configs.
 */
function kamihaya_cms_paragraph_type_update_10006() {
  if (empty(NodeType::load('kamihaya_article'))) {
    return;
  }
  if ($field_config = \Drupal::configFactory()->getEditable('field.field.paragraph.featured_content.field_content')) {
    $value = $field_config->get('settings.handler_settings.target_bundles');
    if (in_array('kamihaya_article', $value)) {
      return;
    }
    $value['kamihaya_article'] = 'kamihaya_article';
    $field_config->set('settings.handler_settings.target_bundles', $value);
    $field_config->save(TRUE);
  }
}

/**
 * Update configs.
 */
function kamihaya_cms_paragraph_type_update_10007() {
  $configs = [];
  $trans_configs = [];
  if (empty(ParagraphsType::load('block'))) {
    $configs[] = 'paragraphs.paragraphs_type.block.yml';
    $configs[] = 'field.storage.paragraph.field_block.yml';
    $configs[] = 'field.field.paragraph.block.field_block.yml';
    $configs[] = 'core.entity_form_display.paragraph.block.default.yml';
    $configs[] = 'core.entity_view_display.paragraph.block.default.yml';
    $trans_configs[] = 'paragraphs.paragraphs_type.block.yml';
    $trans_configs[] = 'field.field.paragraph.block.field_block.yml';
  }
  if (empty(ParagraphsType::load('views'))) {
    $configs[] = 'paragraphs.paragraphs_type.views.yml';
    $configs[] = 'field.storage.paragraph.field_views.yml';
    $configs[] = 'field.field.paragraph.views.field_views.yml';
    $configs[] = 'core.entity_form_display.paragraph.views.default.yml';
    $configs[] = 'core.entity_view_display.paragraph.views.default.yml';
    $trans_configs[] = 'paragraphs.paragraphs_type.views.yml';
    $trans_configs[] = 'field.field.paragraph.views.field_views.yml';
  }

  _kamihaya_cms_common_change_configs('kamihaya_cms_paragraph_type', $configs, 'install');
  _kamihaya_cms_common_save_translation_configs($trans_configs, 'ja');

  $paragraph_types = ['block', 'views'];
  $paragraph_fields = [
    'accordion_item' => 'field_accordion_body',
    'drawer' => 'field_drawer_body',
    'modal_dialog' => 'field_dialog_body',
    'two_col_table_row' => 'field_row_data',
  ];

  foreach($paragraph_fields ?: [] as $paragraph_name => $field) {
    $field_config = \Drupal::configFactory()->getEditable("field.field.paragraph.{$paragraph_name}.{$field}");
    if (empty($field_config)) {
      return;
    }
    $dependencies = $field_config->get('dependencies.config');
    $target_bundles = $field_config->get('settings.handler_settings.target_bundles');
    $target_bundles_drag_drop = $field_config->get('settings.handler_settings.target_bundles_drag_drop');
    $max_weight = 0;
    foreach($target_bundles_drag_drop ?: [] as $target_bundle) {
      if (!$target_bundle['enabled'] || $target_bundle['weight'] < $max_weight) {
        continue;
      }
      $max_weight = $target_bundle['weight'];
    }

    foreach($paragraph_types ?: [] as $paragraph_type) {
      $paragraph = "paragraphs.paragraphs_type.{$paragraph_type}";
      if (!empty($dependencies) && !in_array($paragraph, $dependencies)) {
        $dependencies[] = $paragraph;
      }
      if (!empty($target_bundles) && !in_array($paragraph_type, $target_bundles)) {
        $target_bundles[$paragraph_type] = $paragraph_type;
      }
      if (!empty($target_bundles_drag_drop) && !in_array($paragraph_type, $target_bundles_drag_drop)) {
        $target_bundles_drag_drop[$paragraph_type] = [
          'enabled' => TRUE,
          'weight' => ++$max_weight,
        ];
      }
    }
    $field_config->set('dependencies.config', $dependencies);
    $field_config->set('settings.handler_settings.target_bundles', $target_bundles);
    $field_config->set('settings.handler_settings.target_bundles_drag_drop', $target_bundles_drag_drop);
    $field_config->save(TRUE);
  }
}

/**
 * Update configs.
 */
function kamihaya_cms_paragraph_type_update_10008() {
  $configs = [];
  $trans_configs = [];
  if (empty(ParagraphsType::load('border_box_item'))) {
    $configs[] = 'paragraphs.paragraphs_type.border_box_item.yml';
    $configs[] = 'field.storage.paragraph.field_border_box_body.yml';
    $configs[] = 'field.field.paragraph.border_box_item.field_border_box_body.yml';
    $configs[] = 'core.entity_form_display.paragraph.border_box_item.default.yml';
    $configs[] = 'core.entity_view_display.paragraph.border_box_item.default.yml';
    $trans_configs[] = 'paragraphs.paragraphs_type.border_box_item.yml';
    $trans_configs[] = 'field.field.paragraph.border_box_item.field_border_box_body.yml';
  }
  if (empty(ParagraphsType::load('border_box'))) {
    $configs[] = 'paragraphs.paragraphs_type.border_box.yml';
    $configs[] = 'field.storage.paragraph.field_border_box_item.yml';
    $configs[] = 'field.storage.paragraph.field_bg_color.yml';
    $configs[] = 'field.storage.paragraph.field_border_top_color.yml';
    $configs[] = 'field.storage.paragraph.field_border_bottom_color.yml';
    $configs[] = 'field.storage.paragraph.field_border_left_color.yml';
    $configs[] = 'field.storage.paragraph.field_border_right_color.yml';
    $configs[] = 'field.storage.paragraph.field_border_top_width.yml';
    $configs[] = 'field.storage.paragraph.field_border_bottom_width.yml';
    $configs[] = 'field.storage.paragraph.field_border_left_width.yml';
    $configs[] = 'field.storage.paragraph.field_border_right_width.yml';
    $configs[] = 'field.storage.paragraph.field_border_style.yml';
    $configs[] = 'field.storage.paragraph.field_radius_type.yml';
    $configs[] = 'field.storage.paragraph.field_radius_size.yml';
    $configs[] = 'field.storage.paragraph.field_width.yml';
    $configs[] = 'field.storage.paragraph.field_width_unit.yml';
    $configs[] = 'field.storage.paragraph.field_padding.yml';
    $configs[] = 'field.storage.paragraph.field_align.yml';
    $configs[] = 'field.field.paragraph.border_box.field_border_box_item.yml';
    $configs[] = 'field.field.paragraph.border_box.field_bg_color.yml';
    $configs[] = 'field.field.paragraph.border_box.field_border_top_color.yml';
    $configs[] = 'field.field.paragraph.border_box.field_border_bottom_color.yml';
    $configs[] = 'field.field.paragraph.border_box.field_border_left_color.yml';
    $configs[] = 'field.field.paragraph.border_box.field_border_right_color.yml';
    $configs[] = 'field.field.paragraph.border_box.field_border_top_width.yml';
    $configs[] = 'field.field.paragraph.border_box.field_border_bottom_width.yml';
    $configs[] = 'field.field.paragraph.border_box.field_border_left_width.yml';
    $configs[] = 'field.field.paragraph.border_box.field_border_right_width.yml';
    $configs[] = 'field.field.paragraph.border_box.field_border_style.yml';
    $configs[] = 'field.field.paragraph.border_box.field_radius_type.yml';
    $configs[] = 'field.field.paragraph.border_box.field_radius_size.yml';
    $configs[] = 'field.field.paragraph.border_box.field_width.yml';
    $configs[] = 'field.field.paragraph.border_box.field_width_unit.yml';
    $configs[] = 'field.field.paragraph.border_box.field_padding.yml';
    $configs[] = 'field.field.paragraph.border_box.field_align.yml';
    $configs[] = 'core.entity_form_display.paragraph.border_box.default.yml';
    $configs[] = 'core.entity_view_display.paragraph.border_box.default.yml';
    $trans_configs[] = 'paragraphs.paragraphs_type.border_box.yml';
    $trans_configs[] = 'field.field.paragraph.border_box.field_border_box_item.yml';
    $trans_configs[] = 'field.field.paragraph.border_box.field_bg_color.yml';
    $trans_configs[] = 'field.field.paragraph.border_box.field_border_top_color.yml';
    $trans_configs[] = 'field.field.paragraph.border_box.field_border_bottom_color.yml';
    $trans_configs[] = 'field.field.paragraph.border_box.field_border_left_color.yml';
    $trans_configs[] = 'field.field.paragraph.border_box.field_border_right_color.yml';
    $trans_configs[] = 'field.field.paragraph.border_box.field_border_top_width.yml';
    $trans_configs[] = 'field.field.paragraph.border_box.field_border_bottom_width.yml';
    $trans_configs[] = 'field.field.paragraph.border_box.field_border_left_width.yml';
    $trans_configs[] = 'field.field.paragraph.border_box.field_border_right_width.yml';
    $trans_configs[] = 'field.field.paragraph.border_box.field_border_style.yml';
    $trans_configs[] = 'field.field.paragraph.border_box.field_radius_type.yml';
    $trans_configs[] = 'field.field.paragraph.border_box.field_radius_size.yml';
    $trans_configs[] = 'field.field.paragraph.border_box.field_width.yml';
    $trans_configs[] = 'field.field.paragraph.border_box.field_width_unit.yml';
    $trans_configs[] = 'field.field.paragraph.border_box.field_padding.yml';
    $trans_configs[] = 'field.field.paragraph.border_box.field_align.yml';
  }

  _kamihaya_cms_common_change_configs('kamihaya_cms_paragraph_type', $configs, 'optional');
  _kamihaya_cms_common_save_translation_configs($trans_configs, 'ja');

  $paragraph_type = 'border_box';
  $paragraph_fields = [
    'accordion_item' => 'field_accordion_body',
    'drawer' => 'field_drawer_body',
    'modal_dialog' => 'field_dialog_body',
    'two_col_table_row' => 'field_row_data',
  ];

  foreach($paragraph_fields ?: [] as $paragraph_name => $field) {
    $field_config = \Drupal::configFactory()->getEditable("field.field.paragraph.{$paragraph_name}.{$field}");
    if (empty($field_config)) {
      return;
    }
    $dependencies = $field_config->get('dependencies.config');
    $target_bundles = $field_config->get('settings.handler_settings.target_bundles');
    $target_bundles_drag_drop = $field_config->get('settings.handler_settings.target_bundles_drag_drop');
    $max_weight = 0;
    foreach($target_bundles_drag_drop ?: [] as $target_bundle) {
      if (!$target_bundle['enabled'] || $target_bundle['weight'] < $max_weight) {
        continue;
      }
      $max_weight = $target_bundle['weight'];
    }

    $paragraph = "paragraphs.paragraphs_type.{$paragraph_type}";
    if (!empty($dependencies) && !in_array($paragraph, $dependencies)) {
      $dependencies[] = $paragraph;
    }
    if (!empty($target_bundles) && !in_array($paragraph_type, $target_bundles)) {
      $target_bundles[$paragraph_type] = $paragraph_type;
    }
    if (!empty($target_bundles_drag_drop) && !in_array($paragraph_type, $target_bundles_drag_drop)) {
      $target_bundles_drag_drop[$paragraph_type] = [
        'enabled' => TRUE,
        'weight' => ++$max_weight,
      ];
    }

    $field_config->set('dependencies.config', $dependencies);
    $field_config->set('settings.handler_settings.target_bundles', $target_bundles);
    $field_config->set('settings.handler_settings.target_bundles_drag_drop', $target_bundles_drag_drop);
    $field_config->save(TRUE);
  }
}

/**
 * Update configs.
 */
function kamihaya_cms_paragraph_type_update_10009() {
  $storage_configs = [];
  $install_configs = [];
  $option_configs = [];
  $paragraphs = [
    'divider',
    'image',
    'image_link',
    'link_button',
    'file_download',
    'two_col_table',
    'video',
  ];

  $field_config = FieldStorageConfig::loadByName('paragraph', 'field_align');
  if (!$field_config) {
    $storage_configs[] = "field.storage.paragraph.field_align.yml";
  }
  foreach($paragraphs as $paragraph) {
    if ($paragraph === 'divider') {
      $field_config = FieldConfig::loadByName('paragraph', $paragraph, 'field_width');
      if (!$field_config) {
        $install_configs[] = "field.field.paragraph.{$paragraph}.field_width.yml";
      }
      $field_config = FieldConfig::loadByName('paragraph', $paragraph, 'field_width_unit');
      if (!$field_config) {
        $install_configs[] = "field.field.paragraph.{$paragraph}.field_width_unit.yml";
      }
    }
    $field_config = FieldConfig::loadByName('paragraph', $paragraph, 'field_align');
    if ($field_config) {
      continue;
    }
    if ($paragraph === 'two_col_table') {
      $option_configs[] = "field.field.paragraph.{$paragraph}.field_align.yml";
      continue;
    }
    $install_configs[] = "field.field.paragraph.{$paragraph}.field_align.yml";
  }

  if (empty($storage_configs) &&empty($option_configs) && empty($install_configs)) {
    return;
  }
  if (!empty($storage_configs)) {
    _kamihaya_cms_common_change_configs('kamihaya_cms_paragraph_type', $storage_configs, 'optional');
  }
  if (!empty($option_configs)) {
    _kamihaya_cms_common_change_configs('kamihaya_cms_paragraph_type', $option_configs, 'optional');
  }
  if (!empty($install_configs)) {
    _kamihaya_cms_common_change_configs('kamihaya_cms_paragraph_type', $install_configs, 'install');
  }

  /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $display_repository */
  $display_repository = \Drupal::service('entity_display.repository');

  foreach($paragraphs as $paragraph) {
    if ($paragraph === 'divider') {
      $display_repository->getFormDisplay('paragraph', $paragraph)
        ->setComponent('field_width', [
          'type' => 'number',
        ])
        ->setComponent('field_width_unit', [
          'type' => 'options_select',
        ])
        ->save();
      $display_repository->getViewDisplay('paragraph', $paragraph)
        ->setComponent('field_width', [
          'label' => 'hidden',
          'type' => 'number_integer',
        ])
        ->setComponent('field_width_unit', [
          'label' => 'hidden',
          'type' => 'list_key',
        ])
        ->save();
    }
    $display_repository->getFormDisplay('paragraph', $paragraph)
      ->setComponent('field_align', [
        'type' => 'options_select',
        ])
      ->save();

    $display_repository->getViewDisplay('paragraph', $paragraph)
      ->setComponent('field_align', [
        'label' => 'hidden',
        'type' => 'list_key',
      ])
      ->save();
  }

  _kamihaya_cms_common_save_translation_configs(array_merge($install_configs, $option_configs), 'ja');

}

/**
 * Update configs.
 */
function kamihaya_cms_paragraph_type_update_10010() {
  $storage_configs = [];
  $install_configs = [];

  $fields = [
    'field_link_text',
    'field_link_text_halign',
    'field_link_text_valign',
    'field_image_desc_text_align',
  ];

  foreach($fields as $field) {
    $field_config = FieldStorageConfig::loadByName('paragraph', $field);
    if ($field_config) {
      continue;
    }
    $storage_configs[] = "field.storage.paragraph.{$field}.yml";
    $install_configs[] = "field.field.paragraph.image_link.{$field}.yml";
  }

  if (empty($storage_configs) && empty($install_configs)) {
    return;
  }
  if (!empty($storage_configs)) {
    _kamihaya_cms_common_change_configs('kamihaya_cms_paragraph_type', $storage_configs, 'install');
  }
  if (!empty($install_configs)) {
    _kamihaya_cms_common_change_configs('kamihaya_cms_paragraph_type', $install_configs, 'install');
    _kamihaya_cms_common_save_translation_configs($install_configs, 'ja');
  }

  /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $display_repository */
  $display_repository = \Drupal::service('entity_display.repository');
  $form_display = $display_repository->getFormDisplay('paragraph', 'image_link');
  $view_display = $display_repository->getViewDisplay('paragraph', 'image_link');

  foreach($fields as $field) {
    if ($field === 'field_link_text') {
      $form_display->setComponent($field, [
        'type' => 'paragraphs',
      ])
      ->save();
      $view_display->setComponent($field, [
        'label' => 'hidden',
        'type' => 'entity_reference_revisions_entity_view',
      ])
      ->save();
      continue;
    }
    $form_display->setComponent($field, [
      'type' => 'options_select',
    ])
    ->save();
    $view_display->setComponent($field, [
      'label' => 'hidden',
      'type' => 'list_key',
    ])
    ->save();
  }
}

/**
 * Update configs.
 */
function kamihaya_cms_paragraph_type_update_10011() {
  $field_storage = FieldStorageConfig::loadByName('paragraph', 'field_button_link');
  if ($field_storage) {
    $field_storage->set('cardinality', -1);
    $field_storage->save();
  }
  $field_config = FieldConfig::loadByName('paragraph', 'link_button', 'field_button_link');
  if ($field_config) {
    $settings = $field_config->get('settings');
    $settings['title'] = 1;
    $field_config->set('settings', $settings);
    $field_config->save();
  }
  $field_config = FieldConfig::loadByName('paragraph', 'link_button', 'field_button_text');
  if ($field_config) {
    $field_config->set('required', false);
    $field_config->save();
  }

  $storage_configs = [];
  $install_configs = [];
  $option_configs = [];

  $paragraphs = [
    'modal_dialog' => [
      'field_cookie_name' => 'string_textfield',
      'field_default_open' => 'boolean_checkbox',
      'field_one_time' => 'boolean_checkbox',
      'field_modal_width' => 'number',
      'field_width_unit' => 'options_select',
    ],
    'headings' => [
      'field_align' => 'options_select',
    ],
    'video' => [
      'field_width' => 'number',
      'field_width_unit' => 'options_select',
    ],
  ];

  foreach($paragraphs as $paragraph => $fields) {
    foreach(array_keys($fields) as $field) {
      $field_storage = FieldStorageConfig::loadByName('paragraph', $field);
      if (!$field_storage) {
        $storage_configs[] = "field.storage.paragraph.{$field}.yml";
      }
      $field_config = FieldConfig::loadByName('paragraph', $paragraph, $field);
      if (!$field_config) {
        continue;
      }
      if ($paragraph === 'modal_dialog') {
        $option_configs[] = "field.field.paragraph.{$paragraph}.{$field}.yml";
      }
      else {
        $install_configs[] = "field.field.paragraph.{$paragraph}.{$field}.yml";
      }
    }
  }

  if (empty($storage_configs) && empty($install_configs) && empty($option_configs)) {
    return;
  }
  if (!empty($storage_configs)) {
    _kamihaya_cms_common_change_configs('kamihaya_cms_paragraph_type', $storage_configs, 'optional');
  }
  if (!empty($install_configs)) {
    _kamihaya_cms_common_change_configs('kamihaya_cms_paragraph_type', $install_configs, 'install');
    _kamihaya_cms_common_save_translation_configs($install_configs, 'ja');
  }
  if (!empty($option_configs)) {
    _kamihaya_cms_common_change_configs('kamihaya_cms_paragraph_type', $option_configs, 'optional');
    _kamihaya_cms_common_save_translation_configs($option_configs, 'ja');
  }

  /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $display_repository */
  $display_repository = \Drupal::service('entity_display.repository');

  foreach($paragraphs as $paragraph => $fields) {
    $form_display = $display_repository->getFormDisplay('paragraph', $paragraph);
    foreach($fields as $field => $type) {
      $form_display->setComponent($field, [
        'type' => $type,
      ])
      ->save();
    }
  }
}
