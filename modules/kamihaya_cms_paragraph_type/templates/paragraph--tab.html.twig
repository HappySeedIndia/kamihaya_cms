{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    'tab',
    not paragraph.isPublished() ? 'paragraph--unpublished'
  ]
%}
{% block paragraph %}
	<div{{attributes.addClass(classes)}}>
		{% block content %}
      {% if content.field_tab_item|render %}

      <ul class="nav nav-tabs nav-pills justify-content-center" role="tablist">
        {% for item in content.field_tab_item %}
          {% set active = item['#paragraph'].field_active_tab|render|striptags|trim|lower %}
          {% set color = active == 'true'
            ? item['#paragraph'].field_tab_active_label_color|render|striptags|trim|lower
            : item['#paragraph'].field_tab_label_color|render|striptags|trim|lower %}
          {% set bd_color = active == 'true'
            ? item['#paragraph'].field_tab_border_color|render|striptags|trim|lower
            : item['#paragraph'].field_tab_label_color|render|striptags|trim|lower %}
          {% set bg_color = active == 'true'
            ? item['#paragraph'].field_tab_active_bg_color|render|striptags|trim|lower
            : item['#paragraph'].field_tab_bg_color|render|striptags|trim|lower %}
          {% set bd_radius = item['#paragraph'].field_tab_radius.0.value %}
          {%
            set style = [
              bd_color ? 'border-width: 1px; border-color: ' ~ bd_color  ~ ';' : '',
              bd_radius ? 'border-radius:  ' ~ bd_radius  ~ 'px;' : '',
              bg_color ? 'background-color: ' ~ bg_color  ~ ';' : '',
            ]
          %}

          <li class="nav-item" role="presentation">
            <a href="#tab-{{ item['#paragraph'].id() }}" class="nav-link{% if active == 'true' %} active{% endif %}" data-bs-toggle="tab" aria-selected="true" role="tab"{% if style %} style="{{ style|join(' ') }}" {% endif %}>
              {{ item['#paragraph'].field_label[0].value|raw }}
            </a>
          </li>
        {% endfor %}
      </ul>

			{{ content }}
		{% endblock %}
	</div>
{% endblock paragraph %}

