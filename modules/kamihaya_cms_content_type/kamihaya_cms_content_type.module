<?php

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\node\Entity\NodeType;
use Drupal\node\NodeInterface;
use Drupal\views\Entity\View;
use Drupal\views_flipped_table\Plugin\views\style\FlippedTable;

/**
 * @file
 * hook implementation for Content type.
 */

/**
 * Implements hook_preprocess_layout().
 */
function kamihaya_cms_content_type_preprocess_layout(array &$variables) {
  $links = [];
  $anchor_links = [];
  $full_width = FALSE;

  // Get the current node.
  $node = \Drupal::routeMatch()->getParameter('node');
  if (empty($node)) {
    return;
  }

  /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $display_repository */
  $display_repository = \Drupal::service('entity_display.repository');

  // Get the view display.
  $view_display = $display_repository->getViewDisplay($node->getEntityTypeId(), $node->bundle(), 'default');

  if (empty($view_display)) {
    return;
  }
  // Get the field group settings.
  $field_group_settings = $view_display->getThirdPartySettings('field_group');
  if (empty($field_group_settings)) {
    return;
  }
  $sticky = FALSE;
  foreach($variables['content'] as $name => &$element) {
    if (is_array($element) && array_key_exists('anchor_links', $element)) {
      $anchor_links = &$element['anchor_links'];
    }
    if (strpos($name, 'group_') !== 0 || empty($element['#id']) || empty($element['#title']) || (isset($element['#access']) && empty($element['#access']))) {
      continue;
    }
    if (!empty($element['#attributes']['class']) && in_array('full-width', $element['#attributes']['class'])) {
      $full_width = TRUE;
    }
    if (!$sticky && !empty($field_group_settings[$name]['format_settings']['anchor_link_sticky'])) {
      $sticky = TRUE;
    }

    $links[$element['#id']] = [
      'title' => $element['#title'],
      'url' => Url::fromUserInput("#{$element['#id']}"),
      'attributes' => [
        'class' => ['btn', 'btn-primary'],
      ],
    ];

    if (!empty($field_group_settings[$name]['format_settings']['anchor_link_sticky'])) {
      $links[$element['#id']]['attributes']['class'][] = 'sticky-item';
    }
  }
  if (empty($anchor_links) && !empty($variables['content']['anchor_links'])) {
    $anchor_links = &$variables['content']['anchor_links'];
  }
  if (empty($links) || empty($anchor_links)) {
    return;
  }
  $anchor_links['#links'] = $links;
  $anchor_links['#attributes']['class'] = ['anchor-links'];
  if ($sticky) {
    $anchor_links['#attributes']['class'][] = 'sticky';
    $anchor_links['#prefix'] = '<div class="sticky-end"></div>';
    $variables['#attached']['library'][] = 'kamihaya_cms_content_type/anchor-link-sticky';
  }
  if ($full_width) {
    $variables['#attached']['html_head'][] = [
      [
        '#tag' => 'style',
        '#attributes' => [
          'type' => 'text/css',
        ],
        '#value' => 'body { overflow-x: hidden; }',
      ],
      'kamihaya_cms_content_type',
    ];
  }
}

/**
 * Implements hook_node_load().
 */
function kamihaya_cms_content_type_node_view(array &$build, NodeInterface $node, EntityViewDisplayInterface $display, $view_mode) {
  $contents = $display->getComponents();
  foreach ($contents as $name => $field) {
    if (strpos($name, 'field_') !== 0) {
      continue;
    }
    $field_definition = $node->getFieldDefinition($name);
    if ($field_definition->getType() !== 'viewsreference') {
      continue;
    }
    $default_value = $field_definition->getDefaultValueLiteral();
    $value = $node->get($name)->getValue();
    if (count($default_value) === count($value)) {
      continue;
    }
    if (!empty($value)) {
      $default_value = array_slice($default_value, count($value));
    }
    $entity_repository = \Drupal::service('entity.repository');
    foreach($default_value as $item) {
      if (empty($item) || empty($item['target_uuid']) || empty($item['display_id'])) {
        continue;
      }
      /** @var \Drupal\views\ViewEntityInterface $view */
      $view = $entity_repository->loadEntityByUuid('view', $item['target_uuid']);
      if (empty($view) || empty($view->getDisplay($item['display_id']))) {
        continue;
      }
      $item['target_id'] = $view->id();
      $value[] = $item;
    }
    $node->set($name, $value);
    $build[$name] = $node->$name->view($view_mode);
  }
  if (!in_array('anchor_links', array_keys($contents))) {
    return;
  }
  $build['anchor_links'] = [
    '#theme' => 'links',
  ];
}

/**
 * Implements hook_entity_extra_field_info().
 */
function kamihaya_cms_content_type_entity_extra_field_info() {
  $extra = [];
  $description = t('Kamihaya cms content type module element');
  foreach (NodeType::loadMultiple() as $bundle) {
    $extra['node'][$bundle->id()]['display']['anchor_links'] = [
      'label' => t('Anchor links'),
      'description' => $description,
      'weight' => 100,
      'visible' => TRUE,
    ];
  }

  return $extra;
}

/**
 * Implements hook_field_group_pre_render().
 */
function kamihaya_cms_content_type_field_group_pre_render(array &$element, $group, &$rendering_object) {
  if (empty($element)) {
    return;
  }

  $empty = FALSE;
  foreach($element as $name => &$field) {
    if (strpos($name, 'field_') !== 0 || empty($field['#field_type']) || $field['#field_type'] !== 'viewsreference') {
      continue;
    }
    $empty = TRUE;
    foreach($field as $key => $value) {
      if (!is_numeric($key)) {
        continue;
      }
      if (empty($value['contents']['#view'])) {
        continue;
      }
      $view = $value['contents']['#view'];
      if (empty($view->result)) {
        continue;
      }
      if ($view->style_plugin instanceof FlippedTable) {
        $render = Drupal::service('renderer')->render($value['contents']);
        if (strpos($render, '</tr>') === FALSE) {
          continue;
        }
      }
      $empty = FALSE;
    }
  }
  if ($empty) {
    $element['#access'] = FALSE;
  }

}

/**
 * Implements hook_node_load().
 */
function kamihaya_cms_content_type_node_load(array $nodes) {
  /** @var \Drupal\node\NodeInterface $node */
  foreach ($nodes as $node) {
    $fields = $node->toArray();
    foreach ($fields ?: [] as $field_name => $value) {
      if (!empty($value)) {
        continue;
      }
      $field_config = $node->getFieldDefinition($field_name)->getConfig($node->bundle());
      if (empty($field_config) || $field_config->getType() !== 'entity_reference'
        || empty($field_config->getDefaultValue($node))
        || empty($field_config->getDefaultValue($node)[0]['target_id']))  {
        continue;
      }
      if ($field_config->getSetting('handler') !== 'default:media'
        || empty($field_config->getSetting('handler_settings')['target_bundles'])
        || !in_array('image', $field_config->getSetting('handler_settings')['target_bundles'])) {
        continue;
      }
      $target_id = $field_config->getDefaultValue($node)[0]['target_id'];
      $media = \Drupal::entityTypeManager()->getStorage('media')->load($target_id);
      if (empty($media)) {
        continue;
      }
      $node->set($field_name, $media->id());
    }
  }
}

/**
 * Implements hook_entity_view_display_alter().
 */
function kamihaya_cms_content_type_form_entity_view_display_edit_form_alter(&$form, FormStateInterface $form_state) {
  $form['#process'][] = 'kamihaya_cms_content_type_entity_view_display_edit_form_process';
}

/**
 * Add Regions to 'Manage display' screen.
 *
 * @param array $form
 *   The form to add layout fieldset and extra Display Suite fields.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current form state.
 *
 * @return array
 *   The altered form
 */
function kamihaya_cms_content_type_entity_view_display_edit_form_process(array $form, FormStateInterface $form_state) {
  if (empty($form['#fieldgroups'])) {
    return;
  }

  $manager = \Drupal::service('plugin.manager.field_group.formatters');
  $field_group_form_state = $form_state->get('field_group');
  if (empty($field_group_form_state)) {
    return;
  }
  foreach ($form['#fieldgroups'] as $field_group) {
    if (empty($form['fields'][$field_group]['format']['format_settings']['settings']) || empty($field_group_form_state[$field_group])) {
      continue;
    }

    $group = $field_group_form_state[$field_group];
    $plugin = $manager->getInstance([
      'format_type' => $group->format_type,
      'configuration' => [
        'label' => $group->label,
        'settings' => $group->format_settings,
      ],
      'group' => $group,
    ]);

    $form['fields'][$field_group]['format']['format_settings']['settings']['anchor_link_sticky'] = [
      '#type' => 'checkbox',
      '#title' => t('Sticky anchor links'),
      '#default_value' => $plugin->getSetting('anchor_link_sticky'),
    ];
  }

  return $form;

}
