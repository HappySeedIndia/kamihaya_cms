<?php

use Drupal\Core\Database\DatabaseExceptionWrapper;
use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Database\Query\SelectInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Markup;
use Drupal\views\Plugin\views\pager\Full;
use Drupal\views\Plugin\views\pager\Mini;
use Drupal\views\Views;
use Drupal\views\ViewExecutable;

/**
 * @file
 * Extend the view functions.
 */

/**
 * Implements hook_views_post_execute().
 */
function _kamihaya_cms_views_extension_views_pre_execute(ViewExecutable $view) {
  if (empty($view->pager) || !($view->pager instanceof Full)) {
    return;
  }

  // $view->get_total_rows = TRUE;
}

/**
 * Implements hook_views_post_execute().
 */
function kamihaya_cms_views_extension_views_post_execute(ViewExecutable $view) {
  if (empty($view->pager) || !($view->pager instanceof Mini) || $view->get_total_rows) {
    return;
  }

  $count_query = $view->build_info['count_query'];

  if (!($count_query instanceof SelectInterface)) {
    return;
  }
  $count_query->addMetaData('view', $view);

  if (empty($view->query->options['disable_sql_rewrite'])) {
    $base_table_data = Views::viewsData()->get($view->storage->get('base_table'));
    if (isset($base_table_data['table']['base']['access query tag'])) {
      $access_tag = $base_table_data['table']['base']['access query tag'];
      $count_query->addTag($access_tag);
    }

    if (isset($base_table_data['table']['base']['query metadata'])) {
      foreach ($base_table_data['table']['base']['query metadata'] as $key => $value) {
        $count_query->addMetaData($key, $value);
      }
    }
  }

  if ($count_query) {
    $count_query->preExecute();

    // Build the count query.
    $count_query = $count_query->countQuery();

    try {
      $view->pager->executeCountQuery($count_query);
      $view->pager->updatePageInfo();
    }
    catch (DatabaseExceptionWrapper $e) {
      if (!empty($view->live_preview)) {
        Drupal::messenger()->addError($e->getMessage());
      }
      else {
        throw new DatabaseExceptionWrapper("Exception in {$view->storage->label()}[{$view->storage->id()}]: {$e->getMessage()}");
      }
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function kamihaya_cms_views_extension_views_pre_render(ViewExecutable $view) {
  if (empty($view->pager) || !($view->pager instanceof Full)) {
    return;
  }
  $view->pager->options['quantity'] = 7;
}

/**
 * Implements hook_query_TAG_alter().
 */
function kamihaya_cms_views_extension_query_reduce_duplicate_term_alter(AlterableInterface $query) {
  $field_names = ['tid', 'weight'];
  $fields = &$query->getFields();
  $order_by = &$query->getOrderBy();
  $order_by_keys = array_keys($order_by);
  $order_by_values = array_values($order_by);
  foreach($fields as $name => $field) {
    if (strpos($name, 'parent_tid') === FALSE && !in_array($field['field'], $field_names)) {
      continue;
    };
    if (array_key_exists($name, $order_by)) {
      $index = array_search($name, $order_by_keys);
      $order_by_keys[$index] = "{$field['table']}.{$field['field']}";
      $order_by = array_combine($order_by_keys, $order_by_values);
      unset($order_by[$name]);
    }
    unset($fields[$name]);
  }
}

/**
 * Implements hook_query_TAG_alter().
 */
function kamihaya_cms_views_extension_query_reduce_duplicate_node_alter(AlterableInterface $query) {
  $field_names = ['nid', 'delta'];
  $fields = &$query->getFields();
  $order_by = &$query->getOrderBy();
  $order_by_keys = array_keys($order_by);
  $order_by_values = array_values($order_by);
  foreach($fields as $name => $field) {
    if (!in_array($field['field'], $field_names)) {
      continue;
    };
    if (array_key_exists($name, $order_by)) {
      $index = array_search($name, $order_by_keys);
      $order_by_keys[$index] = "{$field['table']}.{$field['field']}";
      $order_by = array_combine($order_by_keys, $order_by_values);
      unset($order_by[$name]);
    }
    unset($fields[$name]);
  }
}

/**
 * Implements hook_query_TAG_alter().
 */
function kamihaya_cms_views_extension_query_multiple_field_media_alter(AlterableInterface $query) {
  kamihaya_cms_views_extension_query_reduce_duplicate_node_alter($query);
  $fields = &$query->getFields();
  $tables = &$query->getTables();
  $conditions = &$query->conditions();
  $order_by = &$query->getOrderBy();
  $order_by_keys = array_keys($order_by);
  $order_by_values = array_values($order_by);
  $node_tables = [];
  $duplicate_tables = [];
  $idx = 0;
  foreach($tables as $alias => $table) {
    if (empty($node_tables)) {
      $idx++;
    }
    if (in_array($table['table'], array_keys($duplicate_tables))) {
      $duplicate_tables[$table['table']][] = $alias;
      unset($tables[$alias]);
      continue;
    }
    if (count(array_filter($tables, function($table) use ($alias) {
      return $table['table'] === $alias;
    })) > 1) {
      $duplicate_tables[$alias] = [];
    }
    if ($table['table'] !== 'node_field_data') {
      continue;
    }
    $table['condition'] = str_replace("$alias.", 'node_field_data.', $table['condition']);
    $table['alias'] = 'node_field_data';
    $node_tables[$alias] = $table;
    unset($tables[$alias]);
  }
  foreach($tables as $alias => &$table) {
    foreach(array_keys($node_tables) as $node_alias) {
      if (empty($table['condition'])) {
        continue;
      }
      if (strpos($table['condition'], "$node_alias.") !== FALSE) {
        $table['condition'] = str_replace("$node_alias.", 'node_field_data.', $table['condition']);
        break;
      }
    }
  }
  if (empty($node_tables)) {
    return;
  }
  $condision = [];
  $arguments = [];
  foreach($node_tables as $alias => &$table) {
    $condision[] = '(' . $table['condition'] . ')';
    $arguments = array_merge($arguments, $table['arguments']);
  }
  $tables = array_merge(array_slice($tables, 0, $idx), [
    'node_field_data' => [
      'join type' => 'LEFT',
      'table' => 'node_field_data',
      'alias' => 'node_field_data',
      'condition' => implode(' OR ', $condision),
      'arguments' => $arguments,
    ]
    ], array_slice($tables, $idx));

  foreach($fields as $name => &$field) {
    foreach($duplicate_tables as $alias => $duplicates) {
      if (!in_array($field['table'], $duplicates)) {
        continue;
      }
      $field['table'] = $alias;
    }
    if (!in_array($field['table'], array_keys($node_tables))) {
      continue;
    }
    $field['table'] = 'node_field_data';
  }

  foreach($conditions as &$cons0) {
    if (!is_array($cons0) || empty($cons0['field'])) {
      continue;
    }
    $con0 = &$cons0['field']->conditions();
    foreach($con0 as &$cons1) {
      if (!is_array($cons1) || empty($cons1['field'])) {
        continue;
      }

      if (!is_object($cons1['field'])) {
        foreach(array_keys($node_tables) as $node_alias) {
          _kamihaya_cms_views_extension_update_condition($cons1, $node_alias, 'node_field_data', '.nid');
        }
        foreach($duplicate_tables as $alias => $duplicates) {
          foreach($duplicates as $duplicate) {
            _kamihaya_cms_views_extension_update_condition($cons1, $duplicate, $alias);
          }
        }
        continue;
      }
      $con1 = &$cons1['field']->conditions();
      foreach($con1 as &$cons2) {
        if (!is_array($cons2) || empty($cons2['field'])) {
          continue;
        }
        if (!is_object($cons2['field'])) {
          foreach(array_keys($node_tables) as $node_alias) {
            _kamihaya_cms_views_extension_update_condition($cons2, $node_alias, 'node_field_data', '.nid');
          }
          foreach($duplicate_tables as $alias => $duplicates) {
            foreach($duplicates as $duplicate) {
              _kamihaya_cms_views_extension_update_condition($cons2, $duplicate, $alias);
            }
          }
          continue;
        }
        $con2 = &$cons2['field']->conditions();
        foreach($con2 as &$cons3) {
          if (!is_array($cons3) || empty($cons3['field'])) {
            continue;
          }
          if (!is_object($cons3['field'])) {
            foreach(array_keys($node_tables) as $node_alias) {
              _kamihaya_cms_views_extension_update_condition($cons3, $node_alias, 'node_field_data', '.nid');
            }
            foreach($duplicate_tables as $alias => $duplicates) {
              foreach($duplicates as $duplicate) {
                _kamihaya_cms_views_extension_update_condition($cons3, $duplicate, $alias);
              }
            }
            continue;
          }
        }
      }
    }
  }
  foreach($order_by as $name => $order) {
    foreach(array_keys($node_tables) as $node_alias) {
      if (strpos($name, "$node_alias.") === 0) {
        $index = array_search($name, $order_by_keys);
        $order_by_keys[$index] = str_replace("$node_alias.", 'node_field_data-', $name);
        continue 2;
      }
    }
    foreach($duplicate_tables as $alias => $duplicates) {
      foreach($duplicates as $duplicate) {
        if (strpos($name, "$duplicate.") !== FALSE) {
          $index = array_search($name, $order_by_keys);
          $order_by_keys[$index] = str_replace("$duplicate.", "{$alias}-", $name);
          continue 3;
        }
      }
    }
  }
  $order_by = array_combine($order_by_keys, $order_by_values);
  foreach($order_by as $name => $order) {
    if (strpos($name, 'delta') === FALSE && strpos($name, 'weight') === FALSE) {
      continue;
    }
    $field_name = str_replace('-', '.', $name);
    $value = '-2147483648';
    if ($order === 'ASC') {
      $value = '2147483647';
    }
    $query->addExpression("CASE WHEN $field_name IS NULL THEN $value ELSE $field_name END", $name);
  }
}

function _kamihaya_cms_views_extension_update_condition(array &$condition, $alias, $replace, $field = NULL) {
  if (strpos($condition['field'], "$alias.") !== FALSE) {
    $condition['field'] = str_replace("$alias.", "$replace.", $condition['field']);
  }
  if (!empty($field) && strpos($condition['field'], $field) === 0) {
    $condition['field'] = $replace . $condition['field'];
  }
  if (is_array($condition['value']) || empty($condition['value'])) {
    return;
  }
  if (strpos($condition['value'], "$alias.") !== FALSE) {
    $condition['value'] = str_replace("$alias.", "$replace.", $condition['value']);
  }
  if (!empty($field) && strpos($condition['value'], $field) === 0) {
    $condition['value'] = $alias . $condition['value'];
  }
}

/**
 * Implements hook_preprocess_views_view_table().
 */
function kamihaya_cms_views_extension_preprocess_views_view_table(&$variables) {
  $view = $variables['view'];
  $rows = &$variables['rows'];

  if ($view->getStyle()->getPluginId() === 'kamihaya_responsive_table') {
    $variables['#attached']['library'][] = 'kamihaya_cms_views_extension/responsive_table';
    foreach ($rows as $idx => &$row) {
      foreach ($row['columns'] as $field_name=>&$col) {
        $label = $variables['header'][$field_name]['content'];
        if (!empty($col['fields'][0]) && strpos($col['fields'][0], 'views-bulk-operations-bulk-form') === 0) {
          continue;
        }
        $label_value = !empty($label) ? "<b class='responsive-label'>$label</b>" : '';
        if (empty($label)) {
          $col['attributes']->addClass('no-label');
        }
        if (!empty($col['content'])) {
          if ($col['content'][0]['field_output']['#markup'] instanceof Markup) {
            $text = $col['content'][0]['field_output']['#markup']->__toString();
            $col['content'][0]['field_output']['#markup'] = Markup::create("$label_value<div class='field-value'>$text</div>");
          }
          else {
            $text =$col['content'][0]['field_output']['#markup'];
            $col['content'][0]['field_output']['#markup'] = "$label_value<div class='field-value'>$text</div>";
          }
        }
        else {
          $col['content'] = [
            [
              'field_output' => [
                '#markup' => "$label_value<div class='field-value'></div>",
              ]
            ],
          ];
        }
      }
    }
  }
}

/**
 * Implements hook_form_views_exposed_form_alter().
 */
function kamihaya_cms_views_extension_form_views_exposed_form_alter(array &$form, FormStateInterface $form_state) {
  $access = FALSE;
  foreach ($form as $key => &$value) {
    if (!is_array($value) || strpos($key, 'field_') !== 0) {
      continue;
    }
    if (isset($value['#options']) && empty($value['#options'])) {
      $value['#access'] = FALSE;
      if (!empty($value['#group']) && $value['#group'] !== 'secondary') {
        $form[$value['#group']]['#access'] = FALSE;
      }
      continue;
    }
    if (!empty($value['#group']) && $value['#group'] === 'secondary') {
      $access = TRUE;
    }
    if (!empty($value['#related_filter'])) {
      $id = str_replace('_', '-', (!empty($value['#group']) ? $value['#group'] : $key));
      if (!empty($value['#group'])) {
        $form[$value['#group']]['#id'] = $id;
      }
      else {
        $value['#id'] = $id;
      }
      $related_filter = $value['#related_filter'];
      foreach ($related_filter as $filter) {
        continue;
        if (empty($form[$filter]['#ajax'])) {
          $form[$filter]['#ajax'] = [
            'callback' => 'kamihaya_cms_views_extension_ajax_callback',
            'event' => 'change',
            'progress' => [
              'type' => 'throbber',
              'message' => '',
            ],
          ];
        }
        $target = empty($value['#group']) ? $key : $value['#group'];
        $form[$filter]['#ajax']['wrapper'][$target] = $id;
      }
    }
  }
  if (!empty($form['secondary'])) {
    $form['secondary']['#access'] = $access;
  }
}

/**
 * Ajax callback for exposed form.
 *
 * @param array $form
 *   The form array.
 * @param FormStateInterface $form_state
 *  The form state.
 */
function kamihaya_cms_views_extension_ajax_callback(array &$form, FormStateInterface $form_state) {
  $target = $form_state->getTriggeringElement();
  $elements = $target['#ajax']['wrapper'];
  $response = new \Drupal\Core\Ajax\AjaxResponse();
  foreach ($elements as $name => $id) {
    $response->addCommand(new \Drupal\Core\Ajax\ReplaceCommand("#$id", $form[$name]));
  }
  return $response;
}

/**
 * Implements hook_views_plugins_filter_alter().
 */
function kamihaya_cms_views_extension_views_plugins_filter_alter(array &$plugins) {
  if (!empty($plugins['taxonomy_index_tid'])) {
    $plugins['taxonomy_index_tid']['class'] = $plugins['kamihaya_taxonomy_index_tid']['class'];
  }
  if (!empty($plugins['taxonomy_index_tid_depth'])) {
    $plugins['taxonomy_index_tid_depth']['class'] = $plugins['kamihaya_taxonomy_index_tid_depth']['class'];
  }
  if (!empty($plugins['datetime'])) {
    $plugins['datetime']['class'] = $plugins['kamihaya_date']['class'];
  }
  if (!empty($plugins['boolean'])) {
    $plugins['boolean']['class'] = $plugins['kamihaya_boolean']['class'];
  }
}

/**
 * Implements hook_views_plugins_exposed_form_alter().
 */
function kamihaya_cms_views_extension_views_plugins_exposed_form_alter(array &$plugins) {
  if (!empty($plugins['bef'])) {
    $plugins['bef']['class'] = $plugins['kamihaya_exposed_form']['class'];
  }
}

/**
 * Implements hook_preprocess_views_view_table().
 */
function kamihaya_cms_views_extension_preprocess_views_view_field(&$variables) {
  $view = $variables['view'];
  $row = $variables['row'];
  if ($variables['field']->field === 'link_flag') {
   // dpm(array_keys($variables));
   // dpm($variables['output']);
  }
}

/**
 * Implements hook_preprocess_views_view_table().
 */
function kamihaya_cms_views_extension_preprocess_flag(&$variables) {
  $route = Drupal::routeMatch()->getRouteName();
  if (strpos($route, 'view.') !== 0) {
    return;
  }
  $array = explode('.', $route);
  if (count($array) < 3) {
    return;
  }
  $view = Views::getView($array[1]);
  $view->setDisplay($array[2]);
  $display = $view->display_handler;
  if ($display->ajaxEnabled()) {
    return;
  }
  if (empty($variables['attributes']['class']) || $idx = array_search('use-ajax', $variables['attributes']['class'])) {
    return;
  }
  unset($variables['attributes']['class'][$idx]);
}
