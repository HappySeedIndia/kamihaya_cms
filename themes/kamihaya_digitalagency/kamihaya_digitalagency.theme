<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\kamihaya_digitalagency\KamihayaSettingsManager;
use Drupal\menu_link_content\MenuLinkContentInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\user\Entity\User;

/**
 * @file
 * Kamihaya デジタル庁デザインシステム準拠テーマ theme file.
 */

 /**
 * Implements hook_form_FORM_ID_alter().
 */
function kamihaya_digitalagency_form_system_theme_settings_alter(&$form, FormStateInterface $form_state, $form_id = NULL) {
  $settings_manager = new KamihayaSettingsManager(\Drupal::service('theme.manager'));
  return $settings_manager->themeSettingsAlter($form, $form_state, $form_id);
}

/**
 * Implements hook_preprocess_pager().
 */
function kamihaya_digitalagency_preprocess_pager(&$variables) {
  $element = $variables['pager']['#element'];
  /** @var \Drupal\Core\Pager\PagerManagerInterface $pager_manager */
  $pager_manager = \Drupal::service('pager.manager');
  $pager = $pager_manager->getPager($element);
  if (!$pager) {
    return;
  }
  $variables['pager_max'] = $pager->getTotalPages();
 }

/**
 * Implements hook_preprocess_views_mini_pager().
 */
function kamihaya_digitalagency_preprocess_views_mini_pager(&$variables) {
  /** @var \Drupal\Core\Pager\PagerManagerInterface $pager_manager */
  $pager_manager = \Drupal::service('pager.manager');

  $element = $variables['element'];
  $parameters = $variables['parameters'];
  $pager = $pager_manager->getPager($element);
  if (!$pager) {
    return;
  }

  $items = &$variables['items'];
  $current = $pager->getCurrentPage();
  $total = $pager->getTotalPages();

  $route_name = '<current>';
  $route_parameters = $variables['pager']['#route_parameters'] ?? [];

  $variables['pager_max'] = $total;

  // Create the "first" and "previous" links if we are not on the first page.
  if ($current > 0) {
    $items['first'] = [];
    $items['first']['attributes'] = new Attribute();
    $options = [
      'query' => $pager_manager->getUpdatedParameters($parameters, $element, 0),
    ];
    $items['first']['href'] = Url::fromRoute($route_name, $route_parameters, $options)->toString();
  }

  // Create the "next" and "last" links if we are not on the last page.
  if ($current < ($total - 1)) {
    $items['last'] = [];
    $items['last']['attributes'] = new Attribute();
    $options = [
      'query' => $pager_manager->getUpdatedParameters($parameters, $element, $total - 1),
    ];
    $items['last']['href'] = Url::fromRoute($route_name, $route_parameters, $options)->toString();
  }
 }

 /**
 * Implements hook_theme_suggestions_alter().
 */
function kamihaya_digitalagency_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if ($hook === 'views_view_grid') {
    $suggestions[] = $hook . '__' . $variables['view']->id() . '_' . $variables['view']->current_display;
  }
  if ($hook === 'views_view') {
    $suggestions[] = $hook . '__' . $variables['view']->id();
  }
  if ($hook === 'user') {
    $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
    $suggestions[] = 'user__' . $sanitized_view_mode;
  }
  if ($hook === 'node'
    && !empty($variables['elements']['#node'])
    && strpos($variables['elements']['#node']->getType(), 'kamihaya') === 0) {
    $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
    $suggestions[] = 'node__kamihaya';
    $suggestions[] = "node__{$variables['elements']['#node']->getType()}";
    $suggestions[] = "node__$sanitized_view_mode";
    $suggestions[] = "node__kamihaya__$sanitized_view_mode";
    $suggestions[] = "node__{$variables['elements']['#node']->getType()}__$sanitized_view_mode";
  }
  if ($hook === 'taxonomy_term') {
    $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
    $suggestions[] = "taxonomy_term__$sanitized_view_mode";
    $suggestions[] = "taxonomy_term__{$variables['elements']['#taxonomy_term']->bundle()}__$sanitized_view_mode";
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function kamihaya_digitalagency_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // Content type specific twig suggestion.
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    if (is_object($node)) {
      $content_type = $node->bundle();
      $suggestions[] = 'page__' . $content_type;
      $paths = explode('/', $node->toUrl()->toString());
      $suggest = '';
      foreach($paths as $path) {
        if (empty($path)) {
          continue;
        }
        $suggest .= "_$path";
        $suggestions[] = 'page__' . $content_type . '_' . $suggest;
      }
    }
  }
}

 /**
 * Implements hook_preprocess_node().
 */
function kamihaya_digitalagency_preprocess_node(array &$variables) {
  $variables['#attached']['library'][] = 'kamihaya_digitalagency/node';
  if ($variables['elements']['#node']->bundle() === 'recruitment' && $variables['view_mode'] === 'apply_form') {
    $user = User::load(Drupal::currentUser()->id());
    $view_builder = \Drupal::entityTypeManager()->getViewBuilder('user');

    $variables['profile'] = $view_builder->view($user, 'profile');
    $variables['resume'] =  $view_builder->view($user, 'resume');
  }

  if ($variables['elements']['#node']->bundle() === 'kamihaya_article') {
    $variables['#attached']['library'][] = 'kamihaya_digitalagency/node-kamihaya-article';
    $variables['show_post_date'] = theme_get_setting('teaser_show_post_date');
    $variables['show_author_info'] = theme_get_setting('teaser_show_author_info');
  }
}

 /**
 * Implements hook_preprocess_user().
 */
function kamihaya_digitalagency_preprocess_user(array &$variables) {
  $variables['#attached']['library'][] = 'kamihaya_digitalagency/user';
  $variables['view_mode'] = $variables['elements']['#view_mode'];
}

 /**
 * Implements hook_preprocess_view().
 */
function kamihaya_digitalagency_preprocess_views_view(array &$variables) {
  $variables['#attached']['library'][] = 'kamihaya_digitalagency/view';
  $view = $variables['view'];
  if (!empty($view->getStyle()->getPluginId())) {
    $variables['format'] = str_replace('_', '-', $view->getStyle()->getPluginId());
  }
}

/**
 * Implements hook_preprocess_breadcrumb().
 */
function kamihaya_digitalagency_preprocess_breadcrumb(&$variables){
  if(($node = \Drupal::routeMatch()->getParameter('node')) && $variables['breadcrumb']){
    $variables['breadcrumb'][] = [
      'text' => $node->getTitle()
    ];
    $variables['#cache']['contexts'][] = 'url.path';
    $variables['#cache']['tags'][] = 'node:' . $node->id();
  }
}

 /**
 * Implements hook_preprocess_tb_megamenu_submenu().
 */
function kamihaya_digitalagency_preprocess_tb_megamenu_submenu(array &$variables) {
  if ($variables['level'] > 1) {
    return;
  }
  $parent = $variables['parent'];
  $variables['parent_title'] = $parent->link->getTitle();
  $variables['parent_link'] = [
    'title' => $parent->link->getTitle(),
    'url' => $parent->link->getUrlObject(),
  ];
}

 /**
 * Implements hook_preprocess_tb_megamenu_item().
 */
function kamihaya_digitalagency_preprocess_tb_megamenu_item(array &$variables) {
  if (empty($variables['item']->link->getOptions()['container_attributes'])) {
    return;
  }

  foreach($variables['item']->link->getOptions()['container_attributes'] as $key => $value) {
    if ($key === 'font_awesome_class') {
      $variables[$key] = $value;
      continue;
    }
    $variables['attributes']->setAttribute($key, $value);
  }
}

/**
 * Implements template_preprocess_menu().
 */
function kamihaya_digitalagency_preprocess_menu(array &$variables) {
   _kamihaya_digitalagency_preprocess_menu_items($variables['items']);
}

/**
 * Implements hook_preprocess_paragraph().
 */
// function kamihaya_digitalagency_preprocess_paragraph(array &$variables) {
//   $variables['#attached']['library'][] = 'kamihaya_digitalagency/paragraph';
// }

 /**
 * Implements hook_preprocess_commerce_product().
 */
function kamihaya_digitalagency_preprocess_commerce_product(array &$variables) {
  $variables['#attached']['library'][] = 'kamihaya_digitalagency/product';
}

/**
 * Helper function to recursively set the font awesome information.
 */
function _kamihaya_digitalagency_preprocess_menu_items(array &$items) {
  foreach ($items as &$item) {
    /** @var \Drupal\Core\Menu\MenuLinkInterface $menu_link */
    $menu_link = $item['original_link'] ?? NULL;
    if (!empty($menu_link)) {
      $options = ($menu_link instanceof MenuLinkContentInterface) ?
        $menu_link->link->first()->options : $menu_link->getOptions();
      if (!empty($item['attributes']) && $item['attributes']->hasAttribute('font_awesome_class')) {
        $item['font_awesome_class'] = $item['attributes']->offsetGet('font_awesome_class');
        $item['attributes']->removeAttribute('font_awesome_class');
      }
    }
    if (!empty($item['below'])) {
      _kamihaya_digitalagency_preprocess_menu_items($item['below']);
    }
  }
}

 /**
 * Implements hook_preprocess_html().
 */
function kamihaya_digitalagency_preprocess_html(array &$variables) {
  if (theme_get_setting('b5_navbar_schema') === 'custom') {
    $variables['attributes']['class'][] = 'navbar-custom';
  }
  // Navbar colour theme.
  $variables['b5_navbar_schema'] = theme_get_setting('b5_navbar_schema');
  $variables['b5_navbar_bg_schema'] = theme_get_setting('b5_navbar_bg_schema');
  // Footer colour theme.
  $variables['b5_footer_schema'] = theme_get_setting('b5_footer_schema');
  $variables['b5_footer_bg_schema'] = theme_get_setting('b5_footer_bg_schema');
}

/**
 * Implements hook_preprocess_field().
 */
function kamihaya_digitalagency_preprocess_field(&$variables, $hook) {
  $name = $variables['element']['#field_name'];

  if ($variables['element']['#object']->getEntityTypeId() === 'node') {
    $node = $variables['element']['#object'];
  }

  if (isset($node) && $name === "field_required_skill" || $name === "field_welcome_skill") {
    $current_user = User::load(Drupal::currentUser()->id());
    $skill_paragraphs = $current_user->get('field_skill')->referencedEntities();
    $target_ids = [];
    foreach($skill_paragraphs as $paragraph) {
      if (empty($paragraph->get('field_skill')->target_id)) {
        continue;
      }
      $target_ids[] = $paragraph->get('field_skill')->target_id;
    }
    if (empty($target_ids)) {
      return;
    }
    $terms = Term::loadMultiple($target_ids);
    $skils = [];
    foreach ($terms as $terms) {
      $skils[] = $terms->label();
    }
    foreach ($variables['items'] as &$item) {
      if (empty($item['content']['#plain_text']) || empty($item['attributes']) || !in_array($item['content']['#plain_text'], $skils)) {
        continue;
      }
      $item['attributes']->addClass('matching-skill');
    }
  }
}

 /**
 * Implements hook_preprocess_block().
 */
function kamihaya_digitalagency_preprocess_block(array &$variables) {
  if (!empty($variables['plugin_id']) && $variables['plugin_id'] === 'page_title_block') {
    /** @var \Drupal\Entity\FieldableEntityInterface $entity */
    $entity = !empty(\Drupal::routeMatch()->getParameter('node'))
      ? \Drupal::routeMatch()->getParameter('node')
      : \Drupal::routeMatch()->getParameter('taxonomy_term');
    if (empty($entity) || !$entity->hasField('field_not_display_title') || empty($entity->get('field_not_display_title')->value)) {
      return;
    }
    $variables['content']['#access'] = FALSE;
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function kamihaya_digitalagency_page_attachments_alter(array &$page) {
  $colors = [];
  $bg_colors = [];
  if (theme_get_setting('b5_body_schema') === 'custom') {
    if (!empty(theme_get_setting('b5_body_text_color'))) {
      $color = theme_get_setting('b5_body_text_color');
      $colors[$color] = [
        'body.text-custom',
      ];
    }
    if (!empty(theme_get_setting('b5_body_link_color'))) {
      $color = theme_get_setting('b5_body_link_color');
      if (!empty($colors[$color])) {
        $colors[$color][] = 'body.text-custom a';
      } else {
        $colors[$color] = ['body.text-custom a'];
      }
    }
    if (!empty(theme_get_setting('b5_body_link_hover_color'))) {
      $color = theme_get_setting('b5_body_link_hover_color');
      if (!empty($colors[$color])) {
        $colors[$color][] = 'body.text-custom a:hover';
        $colors[$color][] = 'body.text-custom a:focus';
      } else {
        $colors[$color] = [
          'body.text-custom a:hover',
          'body.text-custom a:focus',
        ];
      }
    }
  }
  if (theme_get_setting('b5_body_bg_schema') === 'custom' && !empty(theme_get_setting('b5_body_bg_schema_custom'))) {
    $color = theme_get_setting('b5_body_bg_schema_custom');
    if (!empty($bg_colors[$color])) {
      $bg_colors[$color][] = 'body.bg-custom';
    } else {
      $bg_colors[$color] = ['body.bg-custom'];
    }
  }
  if (theme_get_setting('b5_navbar_schema') === 'custom') {
    if (!empty(theme_get_setting('b5_navbar_text_color'))) {
      $color = theme_get_setting('b5_navbar_text_color');
      if (!empty($colors[$color])) {
        $colors[$color][] = '.navbar.text-custom';
      } else {
        $colors[$color] = ['.navbar.text-custom'];
      }
    }
    if (!empty(theme_get_setting('b5_navbar_link_color'))) {
      $color = theme_get_setting('b5_navbar_link_color');
      if (!empty($colors[$color])) {
        $colors[$color][] = '.navbar.text-custom a';
      } else {
        $colors[$color] = [
          '.navbar.text-custom a',
        ];
      }
    }
    if (!empty(theme_get_setting('b5_navbar_link_hover_color'))) {
      $color = theme_get_setting('b5_navbar_link_hover_color');
      if (!empty($colors[$color])) {
        $colors[$color][] = '.navbar.text-custom a:hover';
        $colors[$color][] = '.navbar.text-custom a:focus';
      } else {
        $colors[$color] = [
          '.navbar.text-custom a:hover',
          '.navbar.text-custom a:focus',
        ];
      }
    }
  }
  if (theme_get_setting('b5_navbar_bg_schema') === 'custom' && !empty(theme_get_setting('b5_navbar_bg_schema_custom'))) {
    $color = theme_get_setting('b5_navbar_bg_schema_custom');
    if (!empty($bg_colors[$color])) {
      $bg_colors[$color][] = '.navbar.bg-custom';
      $bg_colors[$color][] = '.navbar.bg-custom .dropdown-menu';
      $bg_colors[$color][] = '.navbar.bg-custom .dropdown-item:hover';
      $bg_colors[$color][] = '.navbar.bg-custom .dropdown-item:focus';
      $bg_colors[$color][] = '.navbar.bg-custom .dropdown-item.active';
    } else {
      $bg_colors[$color] = [
        '.navbar.bg-custom',
        '.navbar.bg-custom .dropdown-menu',
        '.navbar.bg-custom .dropdown-item:hover',
        '.navbar.bg-custom .dropdown-item:focus',
        '.navbar.bg-custom .dropdown-item.active',
      ];
    }

  }
  if (theme_get_setting('b5_footer_schema') === 'custom') {
    if (!empty(theme_get_setting('b5_footer_text_color'))) {
      $color = theme_get_setting('b5_footer_text_color');
      if (!empty($colors[$color])) {
        $colors[$color][] = 'footer.text-custom';
      } else {
        $colors[$color] = ['footer.text-custom'];
      }
    }
    if (!empty(theme_get_setting('b5_footer_link_color'))) {
      $color = theme_get_setting('b5_footer_link_color');
    if (!empty($colors[$color])) {
        $colors[$color][] = 'footer.text-custom a';
      } else {
        $colors[$color] = [
          'footer.text-custom a',
        ];
      }
    }
    if (!empty(theme_get_setting('b5_footer_link_hover_color'))) {
      $color = theme_get_setting('b5_footer_link_hover_color');
      if (!empty($colors[$color])) {
        $colors[$color][] = 'footer.text-custom a:hover';
        $colors[$color][] = 'footer.text-custom a:focus';
      } else {
        $colors[$color] = [
          'footer.text-custom a:hover',
          'footer.text-custom a:focus',
        ];
      }
    }

  }
  if (theme_get_setting('b5_footer_bg_schema') === 'custom' && !empty(theme_get_setting('b5_footer_bg_schema_custom'))) {
    $color = theme_get_setting('b5_footer_bg_schema_custom');
    if (!empty($bg_colors[$color])) {
      $bg_colors[$color][] = 'footer.bg-custom';
    } else {
      $bg_colors[$color] = [
        'footer.bg-custom',
      ];
    }
  }

  $css_vars = [
    'primary' => [],
    'secondary' => [],
  ];
  foreach(array_keys($css_vars) as $button) {
    foreach(['text', 'bg', 'bd'] as $type) {
      $field = "{$button}_button_{$type}_color";
      $hover_field = "{$button}_button_hover_{$type}_color";
      if (!empty(theme_get_setting($field))) {
        $color = theme_get_setting($field);
        if ($type === 'text') {
          $css_vars[$button]['color'] = $color;
        }
        if ($type === 'bg') {
          $css_vars[$button]['bg'] = $color;
        }
        if ($type === 'bd') {
          $css_vars[$button]['border-color'] = $color;
        }
      }
      if (!empty(theme_get_setting($hover_field))) {
        $color = theme_get_setting($hover_field);
        if ($type === 'text') {
          $css_vars[$button]['hover-color'] = $color;
          $css_vars[$button]['active-color'] = $color;
        }
        if ($type === 'bg') {
          $css_vars[$button]['hover-bg'] = $color;
          $css_vars[$button]['active-bg'] = $color;
        }
        if ($type === 'bd') {
          $css_vars[$button]['hover-border-color'] = $color;
          $css_vars[$button]['active-border-color'] = $color;
        }
      }
    }
  }

  $theme_name = \Drupal::config('system.theme')->get('default');

  // Add CSS color variables.
  $page['#attached']['html_head'][] = [
    [
      '#tag' => 'style',
      '#attributes' => [
        'type' => 'text/css',
      ],
      '#value' => kamihaya_digitalagency_create_css_vars($colors, $bg_colors) .
        (!empty($css_vars) ? PHP_EOL . kamihaya_digitalagency_create_css_custom_vars($css_vars) : ''),
    ],
    $theme_name,
  ];
}

/**
 * Color palette as root css variables.
 *
 * @param array $colors
 *   Color definition.
 *
 * @return string
 *   CSS code.
 */
function kamihaya_digitalagency_create_css_vars(array $colors, array $bg_colors) : string {
  $css = [];
  foreach ($colors as $color => $selectors) {
    $selector = implode(', ', $selectors);
    $css[] = "$selector { color: $color !important; }";
  }
  foreach ($bg_colors as $color => $selectors) {
    $selector = implode(', ', $selectors);
    $css[] = "$selector { background-color: $color !important; }";
  }
  return implode(PHP_EOL, $css);
}

/**
 * Create custom css variables.
 *
 * @param array $vars
 *   Color vars definition.
 *
 * @return string
 *   CSS code.
*/
function kamihaya_digitalagency_create_css_custom_vars(array $css_vars) : string {
  $css = [];
  foreach ($css_vars as $button => $values) {
    $vars = [];
    foreach ($values as $key => $value) {
      $vars[] = "--bs-btn-$key: $value !important;";
    }
    if (empty($vars)) {
      continue;
    }
    $value = implode(PHP_EOL, $vars);
    $css[] = ".btn-$button { $value }";
  }
  return implode(PHP_EOL, $css);
}

